[config]
default_to_workspace = false
skip_core_tasks = true
skip_git_env_info = true
skip_rust_env_info = true
skip_crate_env_info = true

[env]
RPI_TARGET = "aarch64-unknown-linux-gnu"
CLIENT_DIR = "nsuns-client"
SERVER_DIR = "nsuns-server"
# Which config file to bundle with the build
SERVER_CONFIG = "${SERVER_DIR}/config/settings.toml"
# Where the server should look for config if the CONFIG_SOURCE env var is missing at runtime
DEFAULT_CONFIG_SOURCE = "config/settings.toml"
COMPOSE_FILE = "${SERVER_DIR}/tests/docker-compose.yml"

# BUILD

[tasks.build-client]
category = "Build"
description = "Bundles client assets."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["build", "--assetsDir=.", "--outDir=../dist/assets", "--emptyOutDir"]

[tasks.build-server-rpi]
category = "Build"
description = "Compiles the server for the raspberry pi architecture."
command = "cargo"
args = ["build", "--release", "--target=${RPI_TARGET}"]

[tasks.build-server-rpi.env]
RUSTFLAGS = "-C target-feature=+crt-static -C strip=symbols"

[tasks.build]
category = "Build"
description = "Builds client and server, then packages all assets into ./dist."
dependencies = ["build-client", "build-server-rpi"]
script = '''
cp "target/${RPI_TARGET}/release/nsuns-server" ./dist
mkdir -p "./dist/$(dirname $DEFAULT_CONFIG_SOURCE)"
cp "${SERVER_CONFIG}" "./dist/${DEFAULT_CONFIG_SOURCE}"
cp -r "${SERVER_DIR}/db" ./dist
cp docker-compose.yml ./dist
'''

[tasks.default]
description = "Runs the build task"
category = "Default"
dependencies = ["build"]

# CI

[tasks.fmt-check-client]
category = "CI"
description = "Check client formatting."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["fmt-check"]

[tasks.fmt-check-server]
category = "CI"
description = "Check server formatting."
command = "cargo"
args = ["fmt", "--check"]

[tasks.fmt-check]
category = "CI"
description = "Check formatting."
dependencies = ["fmt-check-client", "fmt-check-server"]

[tasks.lint-client]
category = "CI"
description = "Lint client code."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["lint"]

[tasks.lint-server]
category = "CI"
description = "Lint server code."
command = "cargo"
args = ["clippy"]

[tasks.lint]
category = "CI"
description = "Lint both client and server."
dependencies = ["lint-client", "lint-server"]

[tasks.test-client]
category = "CI"
description = "Run client tests."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["test"]

[tasks.start-test-db]
category = "CI"
description = "Start a database for integration testing"
script = '''
echo "Starting test database"
docker compose --file "${COMPOSE_FILE}" up -d --wait
'''

[tasks.stop-test-db]
category = "CI"
description = "Stop the test database"
script = '''
echo "Stopping test database"
docker compose --file "${COMPOSE_FILE}" down
'''

[tasks.test-server-internal]
private = true
category = "CI"
command = "cargo"
args = ["test"]

[tasks.test-server]
category = "CI"
description = "Run server tests."
run_task = { name = [
  "start-test-db",
  "test-server-internal",
], fork = true, cleanup_task = "stop-test-db" }

[tasks.test]
category = "CI"
description = "Run tests."
dependencies = ["test-client", "test-server"]

[tasks.ci]
category = "CI"
description = "Run the full CI pipeline."
dependencies = ["fmt-check", "lint", "test", "build"]

# RUN

[tasks.run-client]
category = "Run"
description = "Run the client locally in dev mode."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["dev"]

[tasks.run-server]
category = "Run"
env = { STATIC_FILES_DIR = "../dist/assets" }
description = "Run the server locally in dev mode."
cwd = "${SERVER_DIR}"
command = "cargo"
args = ["run", "${@}"]
