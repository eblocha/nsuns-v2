[config]
default_to_workspace = false
skip_core_tasks = true
skip_git_env_info = true
skip_rust_env_info = true
skip_crate_env_info = true

[env]
RPI_TARGET = "aarch64-unknown-linux-gnu"
CLIENT_DIR = "nsuns-client"
SERVER_DIR = "nsuns-server"
CONFIG_ROOT = "config"
DIST = "dist"
# Where the server should look for config file(s) if the CONFIG_SOURCE env var is missing at runtime
DEFAULT_CONFIG_SOURCE = "${CONFIG_ROOT}/settings.toml"
# Location of server configuration files
SERVER_CONFIG = "${SERVER_DIR}/${CONFIG_ROOT}"
COMPOSE_FILE = "./docker-compose.yml"
TEST_COMPOSE_FILE = "${SERVER_DIR}/tests/docker-compose.yml"
CARGO_BUILD_FLAGS = ""
SERVER_BIN = "target/release/nsuns-server"

[env.rpi]
CARGO_BUILD_FLAGS = "--target=${RPI_TARGET}"
SERVER_BIN = "target/${RPI_TARGET}/release/nsuns-server"
DEFAULT_CONFIG_SOURCE = "${CONFIG_ROOT}/settings.toml,${CONFIG_ROOT}/settings-rpi-overrides.toml"
COMPOSE_FILE = "./docker/docker-compose.rpi.yml"

# BUILD

[tasks.clean]
category = "Build"
description = "Cleans the output directory"
script_runner = "@shell"
script = 'rm -rf "${DIST}"'

[tasks.build-client]
category = "Build"
description = "Bundles client assets."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["build", "--assetsDir=.", "--outDir=../${DIST}/assets", "--emptyOutDir"]

[tasks.build-server]
category = "Build"
description = "Compiles the server to a single executable."
script = "cargo build --release ${CARGO_BUILD_FLAGS}"

[tasks.build-server.env]
RUSTFLAGS = "-C strip=symbols"

[tasks.build-server.env.rpi]
RUSTFLAGS = "-C target-feature=+crt-static -C strip=symbols"

[tasks.build]
category = "Build"
description = "Builds client and server, then packages all assets into ./dist."
dependencies = ["clean", "build-client", "build-server"]
script_runner = "@shell"
script = '''
cp "${SERVER_BIN}" "${DIST}"
cp -r "${SERVER_CONFIG}" "${DIST}"
cp -r "${SERVER_DIR}/db" "${DIST}"
cp "${COMPOSE_FILE}" "${DIST}/docker-compose.yml"
'''

[tasks.default]
description = "Runs the build task"
category = "Default"
dependencies = ["build"]

# CI

[tasks.fmt-check-client]
category = "CI"
description = "Check client formatting."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["fmt-check"]

[tasks.fmt-check-server]
category = "CI"
description = "Check server formatting."
command = "cargo"
args = ["fmt", "--check"]

[tasks.fmt-check]
category = "CI"
description = "Check formatting."
dependencies = ["fmt-check-client", "fmt-check-server"]

[tasks.lint-client]
category = "CI"
description = "Lint client code."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["lint"]

[tasks.lint-server]
category = "CI"
description = "Lint server code."
command = "cargo"
args = ["clippy"]

[tasks.lint]
category = "CI"
description = "Lint both client and server."
dependencies = ["lint-client", "lint-server"]

[tasks.test-client]
category = "CI"
description = "Run client tests."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["test"]

[tasks.start-test-db]
category = "CI"
description = "Start a database for integration testing"
script_runner = "@shell"
script = '''
echo "Starting test database"
docker compose --file "${TEST_COMPOSE_FILE}" up -d --wait
'''

[tasks.stop-test-db]
category = "CI"
description = "Stop the test database"
script_runner = "@shell"
script = '''
echo "Stopping test database"
docker compose --file "${TEST_COMPOSE_FILE}" down
'''

[tasks.test-server-internal]
private = true
category = "CI"
command = "cargo"
args = ["test"]

[tasks.test-server]
category = "CI"
description = "Run server tests."
run_task = { name = [
  "start-test-db",
  "test-server-internal",
], fork = true, cleanup_task = "stop-test-db" }

[tasks.test]
category = "CI"
description = "Run tests."
dependencies = ["test-client", "test-server"]

[tasks.ci]
category = "CI"
description = "Run the full CI pipeline."
dependencies = ["fmt-check", "lint", "test", "build"]

# RUN

[tasks.run-client]
category = "Run"
description = "Run the client locally in dev mode."
cwd = "${CLIENT_DIR}"
command = "yarn"
args = ["dev"]

[tasks.run-server]
category = "Run"
env = { STATIC_FILES_DIR = "../dist/assets", JSON_LOG = "false" }
description = "Run the server locally in dev mode."
cwd = "${SERVER_DIR}"
command = "cargo"
args = ["run", "${@}"]

# LOAD TESTING

[tasks.load-test-reset-db]
category = "Load Testing"
description = "Prepare the load testing database."
private = true
env = { PGPASSWORD = "postgres" }
script = '''
psql -h localhost -d postgres -U postgres -c "DROP DATABASE load_test;"
psql -h localhost -d postgres -U postgres -c "CREATE DATABASE load_test;"
'''

[tasks.load-test-start-target]
category = "Load Testing"
description = "Start target server"
private = true
dependencies = ["build"]
script = '''
docker build --tag nsuns-server .

docker run -d \
  --rm \
  --name=nsuns-server-load-test \
  --add-host host.docker.internal:host-gateway \
  -e "DATABASE_NAME=load_test" \
  -e "DATABASE_HOST=host.docker.internal" \
  -e "OTEL_ENABLED=false" \
  -e "OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:4317" \
  -p 8080:8080 \
  -p 9100:9100 \
  --health-cmd='curl http://localhost:8080/actuator/health || exit 1' \
  --health-interval=1s \
  nsuns-server
'''

[tasks.load-test-stop-target]
category = "Load Testing"
description = "Stop the target server"
script = "docker stop nsuns-server-load-test"

[tasks.load-test-execute]
category = "Load Testing"
description = "Execute the load testing against the target."
private = true
script = '''
docker run \
  --rm \
  --tty \
  -v ./k6:/scripts \
  --add-host host.docker.internal:host-gateway \
  grafana/k6:latest run /scripts/load-test.js --env TARGET_HOST="host.docker.internal:8080" --no-connection-reuse
'''

[tasks.load-test]
category = "Load Testing"
description = "Run load testing with k6"
run_task = { name = [
  "load-test-reset-db",
  "load-test-start-target",
  "load-test-execute",
], fork = true, cleanup_task = "load-test-stop-target" }
